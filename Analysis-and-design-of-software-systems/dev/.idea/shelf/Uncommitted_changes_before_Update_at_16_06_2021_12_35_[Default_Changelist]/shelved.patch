Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_X\" default=\"true\" project-jdk-name=\"16\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 6d24b36878cd1e01c2e784d39ea3125cc069f0ec)
+++ b/.idea/misc.xml	(date 1623821808899)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_X" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_16" default="true" project-jdk-name="16" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: src/Business/SupplierBusiness/SupplierCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Business.SupplierBusiness;\r\n\r\nimport DataAccess.DALObject;\r\nimport DataAccess.DalSuppliers.*;\r\nimport DataAccess.SMapper;\r\nimport Utility.Tuple;\r\nimport org.apache.log4j.Logger;\r\n\r\nimport java.rmi.server.ExportException;\r\nimport java.time.LocalDate;\r\nimport java.util.*;\r\n\r\n\r\npublic class SupplierCard {\r\n    private List<Order> orders;\r\n    private List<Item> items;\r\n    private SupplierAgreement supplierAgreement;\r\n    private DalSupplierCard dalSupplierCard;\r\n    final static Logger log=Logger.getLogger(SupplierCard.class);\r\n\r\n    public SupplierCard(int supplierBN , String supplierName ,int bankNumber , int branchNumber, int accountNumber , String payWay){\r\n        List<Tuple<Object,Class>> list=new ArrayList<>();\r\n        list.add(new Tuple<>(supplierBN,Integer.class));\r\n        list.add(new Tuple<>(supplierName,String.class));\r\n        list.add(new Tuple<>(payWay,String.class));\r\n        SMapper map= SMapper.getMap();\r\n        map.setItem(DalSupplierCard.class,list);\r\n        List<Integer> keyList=new ArrayList<>();\r\n        keyList.add(supplierBN);\r\n        DALObject check =map.getItem(DalSupplierCard.class ,keyList);\r\n        if (check==null ||(check.getClass()!=DalSupplierCard.class)){\r\n            String s=\"the instance that return from Mapper is null\";\r\n            log.warn(s);\r\n            throw new IllegalArgumentException(s);\r\n        }\r\n        else{\r\n            log.info(\"create new Object\");\r\n            dalSupplierCard = (DalSupplierCard) check;\r\n        }\r\n        items = new LinkedList<>();\r\n        orders = new LinkedList<>();\r\n        dalSupplierCard.updateSupplierBankAccount(bankNumber, branchNumber, accountNumber);\r\n    }\r\n\r\n    public SupplierCard(DalSupplierCard dalSupplierCard) {\r\n        this.dalSupplierCard = dalSupplierCard;\r\n        loadItems();\r\n        loadOrders();\r\n        loadSupplierAgreement();\r\n    }\r\n\r\n    private void loadSupplierAgreement() {\r\n        Tuple<List<Class>,List<Object>> tuple = dalSupplierCard.loadSupplierAgreement();\r\n        if (tuple != null &&  tuple.item2 != null && tuple.item2.size() > 0) {\r\n            int key = (int) tuple.item2.get(0);\r\n            SMapper map = SMapper.getMap();\r\n            List<Integer> keyList = new ArrayList<>();\r\n            keyList.add(key);\r\n            DALObject check = map.getItem(DalSupplierAgreement.class, keyList);\r\n            if (DalSupplierAgreement.class == null || check == null || (check.getClass() != DalSupplierAgreement.class)) {\r\n                String s = \"the instance that return from Mapper is null\";\r\n                log.warn(s);\r\n                throw new IllegalArgumentException(s);\r\n            } else {\r\n                log.info(\"loaded new Object\");\r\n                supplierAgreement = new SupplierAgreement((DalSupplierAgreement) check);\r\n            }\r\n        }\r\n        else {\r\n            supplierAgreement = null;\r\n        }\r\n    }\r\n\r\n    private void loadOrders() {\r\n        orders = new LinkedList<>();\r\n        List<Tuple<List<Class>,List<Object>>> list1 = dalSupplierCard.loadOrders();\r\n        if (list1.size() > 0) {\r\n            for (int i = 0; i < list1.get(0).item2.size(); i = i + 9) {\r\n                int key = (int) list1.get(0).item2.get(i);\r\n                SMapper map = SMapper.getMap();\r\n                List<Integer> keyList = new ArrayList<>();\r\n                keyList.add(key);\r\n                DALObject check = map.getItem(DalOrder.class, keyList);\r\n                if (DalOrder.class == null || check == null || (check.getClass() != DalOrder.class)) {\r\n                    String s = \"the instance that return from Mapper is null\";\r\n                    log.warn(s);\r\n                    throw new IllegalArgumentException(s);\r\n                } else {\r\n                    log.info(\"loaded new Object\");\r\n                    if (((DalOrder) check).getOrderType() == 0) {\r\n                        orders.add(new regularOrder((DalOrder) check));\r\n                    }\r\n                    else {\r\n                        orders.add(new neededOrder((DalOrder) check));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void loadItems() {\r\n        items = new LinkedList<>();\r\n        List<Tuple<List<Class>,List<Object>>> list1 = dalSupplierCard.loadItems();\r\n        if (list1.size() > 0) {\r\n            for (int i = 0; i < list1.get(0).item2.size(); i = i + 7) {\r\n                int key = (int) list1.get(0).item2.get(i);\r\n                SMapper map = SMapper.getMap();\r\n                List<Integer> keyList = new ArrayList<>();\r\n                keyList.add(key);\r\n                DALObject check = map.getItem(DalItem.class, keyList);\r\n                if (DalItem.class == null || check == null || (check.getClass() != DalItem.class)) {\r\n                    String s = \"the instance that return from Mapper is null\";\r\n                    log.warn(s);\r\n                    throw new IllegalArgumentException(s);\r\n                } else {\r\n                    log.info(\"loaded new Object\");\r\n                    items.add(new Item((DalItem) check));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void removeSupplier() throws Exception {\r\n        dalSupplierCard.removeSupplier();\r\n        orders = new LinkedList<>();\r\n        items = new LinkedList<>();\r\n    }\r\n\r\n    public int getSupplierBN() {\r\n        return dalSupplierCard.getSupplierBN();\r\n    }\r\n\r\n    public int getSupplierBankNumber() {\r\n        return dalSupplierCard.getSupplierBankNumber();\r\n    }\r\n\r\n    public int getSupplierBranchNumber() {\r\n        return dalSupplierCard.getSupplierBranchNumber();\r\n    }\r\n\r\n    public int getSupplierAccountNumber() {\r\n        return dalSupplierCard.getSupplierAccountNumber();\r\n    }\r\n\r\n    public String getSupplierPayWay() {\r\n        return dalSupplierCard.getSupplierPayWay();\r\n    }\r\n\r\n    public Dictionary<String , String> getContactPhone() {\r\n        return dalSupplierCard.getContactPhone();\r\n    }\r\n\r\n    public Dictionary<String , String> getContactEmail() {\r\n        return dalSupplierCard.getContactEmail();\r\n    }\r\n\r\n    public String getSupplierName() {\r\n        return dalSupplierCard.getSupplierName();\r\n    }\r\n\r\n    public void updateSupplierPayWay(String payWay) throws Exception {\r\n        if(!(payWay.equals(\"check\") || payWay.equals(\"bank transfer\") || payWay.equals(\"cash\")))\r\n            throw new Exception(\"pay way must be check/bank transfer/cash.\");\r\n        dalSupplierCard.updateSupplierPayWay(payWay);\r\n    }\r\n\r\n    public void updateSupplierBankAccount(int bankNumber , int branchNumber , int bankAccount) throws Exception {\r\n        if(bankAccount < 0) throw new Exception(\"bank account must be a positive number\");\r\n        dalSupplierCard.updateSupplierBankAccount(bankNumber, branchNumber, bankAccount);\r\n    }\r\n\r\n    public void addContactPhone(String phone, String name) throws Exception {\r\n        try {\r\n            if (dalSupplierCard.getContactPhone().get(phone) != null)\r\n                throw new Exception(\"contact phone all ready exist, you may want to use: update contact phone\");\r\n        }\r\n        catch (Exception e) {\r\n        }\r\n        dalSupplierCard.addContactPhone(phone, name);\r\n    }\r\n\r\n    public void addContactEmail(String email, String name) throws Exception {\r\n        try {\r\n            if (dalSupplierCard.getContactEmail().get(email) != null)\r\n                throw new Exception(\"contact email all ready exist, you may want to use: update contact email\");\r\n        } catch (Exception e) {\r\n        }\r\n        dalSupplierCard.addContactEmail(email, name);\r\n    }\r\n\r\n    public void removeContactPhone(String phone) throws Exception {\r\n        if(dalSupplierCard.getContactPhone().get(phone) == null)\r\n            throw new Exception(\"contact phone does not exist\");\r\n        dalSupplierCard.removeContactPhone(phone);\r\n    }\r\n\r\n    public void removeContactEmail(String email) throws Exception {\r\n        if(dalSupplierCard.getContactEmail().get(email) == null)\r\n            throw new Exception(\"contact email does not exist\");\r\n        dalSupplierCard.removeContactEmail(email);\r\n    }\r\n\r\n\r\n\r\n    public void updateContactPhone(String phone , String name) throws Exception {\r\n        Enumeration<String> e1 = dalSupplierCard.getContactPhone().elements();\r\n        while (e1.hasMoreElements()) {\r\n            String element = e1.nextElement();\r\n            if(name.equals(element)){\r\n                Enumeration<String> e2 = dalSupplierCard.getContactPhone().keys();\r\n                while (e2.hasMoreElements()) {\r\n                    String oldPhone = e2.nextElement();\r\n                    if (dalSupplierCard.getContactPhone().get(oldPhone).equals(name)) {\r\n                        removeContactPhone(oldPhone);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        addContactPhone(phone, name);\r\n    }\r\n\r\n    public void updateContactEmail(String email , String name) throws Exception {\r\n        Enumeration<String> e1 = dalSupplierCard.getContactEmail().elements();\r\n        while (e1.hasMoreElements()) {\r\n            String element = e1.nextElement();\r\n            if(name.equals(element)){\r\n                Enumeration<String> e2 = dalSupplierCard.getContactEmail().keys();\r\n                while (e2.hasMoreElements()) {\r\n                    String oldEmail = e2.nextElement();\r\n                    if (dalSupplierCard.getContactEmail().get(oldEmail).equals(name)) {\r\n                        removeContactEmail(oldEmail);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        addContactEmail(email, name);\r\n    }\r\n\r\n\r\n    public List<Item> showAllItemsOfSupplier() {\r\n        return items;\r\n    }\r\n\r\n    public Item showItemOfSupplier(int itemId) throws Exception {\r\n        for(Item item : items){\r\n            if(item.getItemId() == itemId) return item;\r\n        }\r\n        throw new Exception(\"itemId does net exist for this supplier\");\r\n    }\r\n\r\n    public Item addItem(int supplierBN, int ItemId , String name , double price , LocalDate expirationDate, double weight) throws Exception {\r\n        if(price < 0) throw new Exception(\"price must be a positive number!\");\r\n        if(expirationDate.isBefore(LocalDate.now())) throw new IllegalAccessException(\"expiration date must be in the future\");\r\n        Item newItem = new Business.SupplierBusiness.Item(supplierBN, ItemId , name , price , expirationDate, weight);\r\n        items.add(newItem);\r\n        return newItem;\r\n    }\r\n\r\n    public Hashtable<Item, Integer> showAllItemsOfOrder(int orderId) throws Exception {\r\n        for(Order order : orders){\r\n            if(order.getOrderId() == orderId) return order.showAllItemsOfOrder();\r\n        }\r\n        throw new Exception(\"orderId does not exist.\");\r\n    }\r\n\r\n    public void removeItem(int itemId) throws Exception { /////////I think it need to be modified\r\n        List<Item> copyItem = items;\r\n        boolean found = false;\r\n        for(Item item : copyItem){\r\n            if(item.getItemId() == itemId){\r\n                items.remove(item);\r\n                item.removeItem();\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!found) throw new Exception(\"itemId does not exist for this supplier\");\r\n    }\r\n\r\n    public void removeItemFromRegularOrder(int orderId, int itemId) throws Exception {\r\n        for(Order order : orders){\r\n            if(order.getOrderId() == orderId){\r\n                try {\r\n                    if(order.getOrderType() == 1) throw new Exception(\"you can remove items only from regular order\");\r\n                    regularOrder regularOrder = (regularOrder) order;\r\n                    regularOrder.removeItemFromRegularOrder(itemId);\r\n                    break;\r\n                }catch (Exception e){\r\n                    throw new Exception(e.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void removeAmountItemFromRegularOrder(int orderId, int itemId, int amount) throws Exception {\r\n        for(Order order : orders){\r\n            if(order.getOrderId() == orderId){\r\n                try {\r\n                    if(order.getOrderType() == 1) throw new Exception(\"you can remove items only from regular order\");\r\n                    regularOrder regularOrder = (Business.SupplierBusiness.regularOrder) order;\r\n                    regularOrder.removeAmountItemFromRegularOrder(itemId , amount);\r\n                    break;\r\n                }catch (Exception e){\r\n                    throw new Exception(e.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public Tuple<Order , Boolean> addRegularOrder(int orderId , int branchId, Hashtable<Integer, Integer> items) throws Exception {\r\n        regularOrder order;\r\n        order = new regularOrder(dalSupplierCard.getSupplierBN(), orderId , branchId);\r\n        orders.add(order);\r\n        try {\r\n            for (Integer itemID : items.keySet()) {\r\n                addItemToOrder(orderId, itemID, items.get(itemID));\r\n            }\r\n        } catch (Exception e) {\r\n            throw new Exception(e.getMessage());\r\n        }\r\n        return new Tuple<>(order , supplierAgreement.getShipToUs());\r\n    }\r\n\r\n    public Item getItem(int itemId) throws Exception {\r\n        for(Item item : items){\r\n            if(item.getItemId() == itemId)\r\n                return item;\r\n        }\r\n        throw new Exception(\"there is no such itemId for this Supplier\");\r\n    }\r\n\r\n    public Tuple<Order , Boolean> addNeededOrder(int orderID, int branchID, Item item, int amount) throws Exception {\r\n        if (item == null || isItemExist(item.getItemId()) == null) return null;\r\n        neededOrder order;\r\n        double totalAmount = calculateTotalAmount(item , amount);\r\n        try {\r\n             order = new neededOrder(dalSupplierCard.getSupplierBN(), orderID ,LocalDate.now().plusDays(1), branchID, item, amount , totalAmount);\r\n        }catch (Exception e){\r\n            throw new Exception(e.getMessage());\r\n        }\r\n        orders.add(order);\r\n        return new Tuple<>(order , supplierAgreement.getShipToUs());\r\n    }\r\n\r\n    public double calculateTotalAmount(Item item , int amount){\r\n        double totalAmount = 0.0;\r\n        QuantityDocument qd = item.getQuantityDocument();\r\n        if (qd != null) {\r\n            totalAmount = totalAmount + item.getPrice() * amount;\r\n            if (qd.getMinimalAmount() <= amount) {\r\n                double discount = qd.getDiscount() / 100.0;\r\n                totalAmount = totalAmount - item.getPrice() * discount * amount;\r\n            }\r\n        }\r\n        return totalAmount;\r\n    }\r\n\r\n    private Item isItemExist(int itemId){\r\n        for (Item i : items) {\r\n            if (i.getItemId() == itemId) {\r\n                return i;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public Tuple<Order , Boolean> addItemToOrder(int orderId, int itemId , int amount) throws Exception {\r\n        Item toAdd = isItemExist(itemId);\r\n        if(toAdd == null) throw new Exception(\"the supplier does not have this item\");\r\n        for (Order o : orders) {\r\n            if(o.getOrderType() == 1) throw new Exception(\"you can add more items to an existing order only for regular order\");\r\n            if (o.getOrderId() == orderId) {\r\n                regularOrder temp = (regularOrder) o;\r\n                temp.addItemToOrder(toAdd , amount);\r\n                return new Tuple<>(o, supplierAgreement.getShipToUs());\r\n            }\r\n        }\r\n        throw new Exception(\"orderId does not exist\");\r\n    }\r\n\r\n\r\n    public void removeOrder(int orderId) throws Exception {\r\n        List<Order> copyOrders = orders;\r\n        boolean found = false;\r\n        for(Order order : copyOrders){\r\n            if(order.getOrderId() == orderId){\r\n                if (order.getIsArrived()==1) {\r\n                    throw new Exception(\"order already arrived to store - can't remove!\");\r\n                }\r\n                order.removeOrder();\r\n                orders.remove(order);\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if(!found) throw new Exception(\"orderId does not exist\");\r\n    }\r\n\r\n    public Order showOrderOfSupplier(int orderId) throws Exception {\r\n        for (Order o : orders) {\r\n            if (o.getOrderId() == orderId)\r\n                if (!o.isRemoved())\r\n                    return o;\r\n        }\r\n        throw new Exception(\"orderId does not exist.\");\r\n    }\r\n\r\n    public List<Order> showAllOrdersOfSupplier() {\r\n        orders.removeIf(Order::isRemoved);\r\n        return orders;\r\n    }\r\n\r\n    public Order showTotalAmount(int orderId) throws Exception {\r\n        double totalAmount;\r\n        boolean found = false;\r\n        Order order = null;\r\n        for(Order o : orders) {\r\n            if (o.getOrderId() == orderId) {\r\n                found = true;\r\n                try {\r\n                    totalAmount = o.getTotalAmount();\r\n                } catch (Exception e) {\r\n                    throw new Exception(e);\r\n                }\r\n                order = o;\r\n                if(supplierAgreement.getMinimalAmount() <= order.getTotalAmount()){\r\n                    double discount = 1 - supplierAgreement.getDiscount()/100.0;\r\n                    totalAmount = totalAmount*discount;\r\n                    regularOrder temp = (regularOrder) order;\r\n                    temp.updateTotalAmount(totalAmount);\r\n                }\r\n            }\r\n        }\r\n        if(found) return order;\r\n        throw new Exception(\"orderId does not exist.\");\r\n    }\r\n\r\n    public Order showDeliverTime(int orderId) throws Exception {\r\n        for (Order o : orders) {\r\n            if (o.getOrderId() == orderId)\r\n                try {\r\n                    return o.showDeliverTime();\r\n                } catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n        }\r\n        throw new Exception(\"orderId does not exist.\");\r\n    }\r\n\r\n//    public void updateDeliverTime(int orderId, LocalDate deliverTime) throws Exception {\r\n//        boolean hasFound = false;\r\n//        for (Order o : orders) {\r\n//            if (o.getOrderId() == orderId) {\r\n//                if(o.getOrderType() == 1) throw new Exception(\"you can update deliver time only for regular order\");\r\n//                regularOrder temp = (regularOrder) o;\r\n//                temp.updateDeliverTime(deliverTime);\r\n//                hasFound = true;\r\n//            }\r\n//            if(hasFound) break;\r\n//        }\r\n//        if(!hasFound) throw new Exception(\"orderId does not exist.\");\r\n//    }\r\n\r\n    public void addQuantityDocument(int itemId, int minimalAmount, int discount) throws Exception {\r\n        boolean hasFound = false;\r\n        for (Item i : items) {\r\n            if (i.getItemId() == itemId) {\r\n                try {\r\n                    i.addQuantityDocument(minimalAmount, discount);\r\n                    hasFound = true;\r\n                } catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n           }\r\n            if(hasFound) break;\r\n        }\r\n        if(!hasFound) throw new Exception(\"itemId does not exist.\");\r\n    }\r\n\r\n    public void removeQuantityDocument(int itemId) throws Exception {\r\n        boolean hasFound = false;\r\n        for (Item i : items) {\r\n            if (i.getItemId() == itemId) {\r\n                try {\r\n                    i.removeQuantityDocument();\r\n                    hasFound = true;\r\n                }catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n            }\r\n            if(hasFound) break;\r\n        }\r\n        if(!hasFound) throw new Exception(\"itemId does not exist for this supplier\");\r\n    }\r\n\r\n    public QuantityDocument showQuantityDocument(int itemId) throws Exception {\r\n        for (Item i : items) {\r\n            if (i.getItemId() == itemId) {\r\n                try {\r\n                    return i.showQuantityDocument();\r\n                } catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n            }\r\n        }\r\n        throw new Exception(\"itemId does not exist.\");\r\n    }\r\n\r\n    public void updateMinimalAmountOfQD(int itemId, int minimalAmount) throws Exception {\r\n        boolean hasFound = false;\r\n        for (Item i : items) {\r\n            if (i.getItemId() == itemId) {\r\n                try {\r\n                    i.updateMinimalAmountOfQD(minimalAmount);\r\n                    hasFound = true;\r\n                }catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n            }\r\n            if(hasFound) break;\r\n        }\r\n        if(!hasFound) throw new Exception(\"itemId does not found\");\r\n    }\r\n\r\n    public void updateDiscountOfQD(int itemId, int discount) throws Exception {\r\n        boolean hasFound = false;\r\n        for (Item item : items) {\r\n            if (item.getItemId() == itemId) {\r\n                try{\r\n                    item.updateDiscountOfQD(discount);\r\n                    hasFound = true;\r\n                } catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n            }\r\n            if(hasFound) break;\r\n        }\r\n        if(!hasFound) throw new Exception(\"itemId does not exist\");\r\n    }\r\n\r\n    public void addSupplierAgreement(int supplierBN, int minimalAmount, int discount, boolean constantTime, boolean shipToUs) throws Exception {\r\n        if(minimalAmount < 0 ) throw new Exception(\"minimal amount must be a positive number\");\r\n        if(discount < 0 || discount > 100) throw new Exception(\"minimal amount must be a positive number between 0 to 100\");\r\n        supplierAgreement = new SupplierAgreement(supplierBN, minimalAmount, discount, constantTime, shipToUs);\r\n    }\r\n\r\n    public SupplierAgreement showSupplierAgreement() {\r\n        return supplierAgreement;\r\n    }\r\n\r\n    public void updateMinimalAmountOfSA(int minimalAmount) throws Exception {\r\n        try {\r\n            supplierAgreement.updateMinimalAmountOfSA(minimalAmount);\r\n        } catch (Exception e){\r\n            throw new Exception(e);\r\n        }\r\n    }\r\n\r\n    public void updateDiscountOfSA(int discount) throws Exception {\r\n        try {\r\n            supplierAgreement.updateDiscountOfSA(discount);\r\n        } catch (Exception e){\r\n            throw new Exception(e);\r\n        }\r\n    }\r\n\r\n    public void updateConstantTime(boolean constantTime) throws Exception { supplierAgreement.updateConstantTime(constantTime); }\r\n\r\n    public void updateShipToUs(boolean shipToUs) throws Exception {\r\n        supplierAgreement.updateShipToUs(shipToUs);\r\n    }\r\n\r\n    public void updatePrice(int itemId , double price) throws Exception {\r\n        boolean hasFound = false;\r\n        for(Item item : items){\r\n            if(item.getItemId() == itemId){\r\n                try {\r\n                    item.updatePrice(price);\r\n                    hasFound = true;\r\n                }catch (Exception e){\r\n                    throw new Exception(e);\r\n                }\r\n            }\r\n            if(hasFound) break;\r\n        }\r\n        if(!hasFound) throw new Exception(\"itemId does not found\");\r\n    }\r\n\r\n    public void removeOrdersByTransportation(int transportationID) throws Exception {\r\n        for (Order o : orders) {\r\n            if (o.getTransportationID() == transportationID) {\r\n                removeOrder(o.getOrderId());\r\n            }\r\n        }\r\n    }\r\n    public List<Item> getSupplierItems() {\r\n        return items;\r\n    }\r\n\r\n    private void loadOrdersByTransportationID(int transportationID) {\r\n        List<Order> ordersOfTransportation = new LinkedList<>();\r\n        List<Tuple<List<Class>,List<Object>>> list1 = dalSupplierCard.loadOrdersByTransportation(transportationID);\r\n        if (list1.size() > 0) {\r\n            for (int i = 0; i < list1.get(0).item2.size(); i = i + 8) {\r\n                int key = (int) list1.get(0).item2.get(i);\r\n                SMapper map = SMapper.getMap();\r\n                List<Integer> keyList = new ArrayList<>();\r\n                keyList.add(key);\r\n                DALObject check = map.getItem(DalOrder.class, keyList);\r\n                if (check == null || (check.getClass() != DalOrder.class)) {\r\n                    String s = \"the instance that return from Mapper is null\";\r\n                    log.warn(s);\r\n                    throw new IllegalArgumentException(s);\r\n                } else {\r\n                    log.info(\"loaded new Object\");\r\n                    if (((DalOrder) check).getOrderType() == 0) {\r\n                        ordersOfTransportation.add(new regularOrder((DalOrder) check));\r\n                    }\r\n                    else {\r\n                        ordersOfTransportation.add(new neededOrder((DalOrder) check));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void updateArrived(int orderId) throws Exception {\r\n        boolean found = false;\r\n        try{\r\n            for (Order o : orders) {\r\n                if (o.getOrderId() == orderId) {\r\n                    o.updateArrived();\r\n                    found = true;\r\n                }\r\n            }\r\n            if(!found) throw new Exception(\"orderId does not exist.\");\r\n        }catch (Exception e){\r\n            throw new Exception(e.getMessage());\r\n        }\r\n    }\r\n\r\n    public LocalDate getExpirationDate(int itemId) throws ExportException {\r\n        try {\r\n            for (Item item : items) {\r\n                if (item.getItemId() == itemId)\r\n                    return item.getExpirationDate();\r\n            }\r\n        } catch (Exception e) {\r\n            throw new ExportException(e.getMessage());\r\n        }\r\n        throw new ExportException(\"there is no such itemId to this supplier\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Business/SupplierBusiness/SupplierCard.java b/src/Business/SupplierBusiness/SupplierCard.java
--- a/src/Business/SupplierBusiness/SupplierCard.java	(revision 6d24b36878cd1e01c2e784d39ea3125cc069f0ec)
+++ b/src/Business/SupplierBusiness/SupplierCard.java	(date 1623835640392)
@@ -371,8 +371,8 @@
         Item toAdd = isItemExist(itemId);
         if(toAdd == null) throw new Exception("the supplier does not have this item");
         for (Order o : orders) {
-            if(o.getOrderType() == 1) throw new Exception("you can add more items to an existing order only for regular order");
             if (o.getOrderId() == orderId) {
+                if(o.getOrderType() == 1) throw new Exception("you can add more items to an existing order only for regular order");
                 regularOrder temp = (regularOrder) o;
                 temp.addItemToOrder(toAdd , amount);
                 return new Tuple<>(o, supplierAgreement.getShipToUs());
